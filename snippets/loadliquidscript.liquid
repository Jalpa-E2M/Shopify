setTopPadding();
const debounceSetTopPadding = debounce(setTopPadding, 300);
window.addEventListener('resize', debounceSetTopPadding);
nav();

$('body').on('click', function () {
  const videoElement = document.getElementsByClassName('builder-video')[0];
  if ($('.builder-video').length && !videoElement.playing) {
      videoElement.play();
  }
});


//fade in animations

window.isScrolledIntoView = function(elem) {
    var docViewTop = $(window).scrollTop();
    var docViewBottom = docViewTop + $(window).height();

    var elemTop = $(elem).offset().top;
    var elemBottom = elemTop + $(elem).height();

    return ((elemBottom >= docViewTop) && (elemTop <= docViewBottom));
}

var scrollTimer, lastScrollFireTime = 0;

const scrollFadeIn = function (e) {

    var minScrollTime = 250;
    var now = new Date().getTime();

    if (!scrollTimer) {
        if (now - lastScrollFireTime > (3 * minScrollTime)) {
            $('.fade-in-1').each(function () {
                if (isScrolledIntoView(this) === true) {
                    $(this).addClass("is-visible");
                    
                }
            });
            $('.fade-in-2').each(function () {
                if (isScrolledIntoView(this) === true) {
                    $(this).addClass("is-visible");
                }
            });
            $('.fade-in-3').each(function () {
                if (isScrolledIntoView(this) === true) {
                    $(this).addClass("is-visible");
                }
            });
            lastScrollFireTime = now;
        }
        scrollTimer = setTimeout(function() {
            scrollTimer = null;
            lastScrollFireTime = new Date().getTime();
            $('.fade-in-1').each(function () {
                if (isScrolledIntoView(this) === true) {
                    $(this).addClass("is-visible");
                }
            });
            $('.fade-in-2').each(function () {
                if (isScrolledIntoView(this) === true) {
                    $(this).addClass("is-visible");
                }
            });
            $('.fade-in-3').each(function () {
                if (isScrolledIntoView(this) === true) {
                    $(this).addClass("is-visible");
                }
            });
        }, minScrollTime);
    }
};

scrollFadeIn();
window.addEventListener('scroll', scrollFadeIn);


document.querySelectorAll('a[href]').forEach(a => {
  const linkHostname = new URL(a.href).hostname;
  if (location.hostname === linkHostname || linkHostname === 'eyeswoon.gorgias.help')
  return;
  a.target = '_blank';
  a.rel = 'noreferrer nofollow noopener';
});



{% comment %} $('.swiper').each(function(i, obj) {
    $(this).find('img').attr('loading','eager');
}); {% endcomment %}



 //offset anchor links

  $('a[href*="#"]:not([href="#"])').click(function() {
    var offset = -200; // <-- change the value here
    if (location.pathname.replace(/^\//,'') == this.pathname.replace(/^\//,'') && location.hostname == this.hostname) {
        var target = $(this.hash);
        target = target.length ? target : $('[name=' + this.hash.slice(1) +']');
        if (target.length) {
            $('html, body').animate({
                scrollTop: target.offset().top + offset
            }, 1000);
            return false;
        }
    }
});

window.featureSectionsLoaded = false;

if (typeof BuilderWC !== 'undefined') {
    if (BuilderWC.builder.editingMode$.value != true) {
        var featureArrayLength = $('.section-insert').length;
        for (var i = 0; i < featureArrayLength; i++) {
            if (featureSectionsLoaded == false) {
                let currentEl = $('.section-insert')[i]
                $(currentEl).parent().css( "display", "none" );
                featureSectionsLoaded = true;
            }
        }
    }
}

{% if collection.sort_by == "manual" or collection.sort_by == nil or collection.sort_by == "" and collection.url == request.path and collection.handle != "all" %} 
window.checkFeaturedSections = function() {
  var observer = new MutationObserver(function(mutationsList) {
    for (let mutation of mutationsList) {
      if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
        mutation.addedNodes.forEach(function(node) {
          if (node.nodeType === Node.ELEMENT_NODE && $(node).find('.css-0').length) {
            observer.disconnect();
            renderFeaturedSectionsWithCss0();
          }
        });
      }
    }
  });

  var config = { childList: true, subtree: true };
  $('.featured-section').each(function() {
    observer.observe(this, config);
  });
}

window.renderFeaturedSectionsWithCss0 = function() {
  var featureArrayLength = $('.section-insert').length;
  for (var i = 0; i < featureArrayLength; i++) {
    var section = $('.section-insert')[i];
    var id = section.getAttribute('id');
    if (id && $(section).find('.css-0').length > 0) {
      renderFeaturedSection(id);
    }
  }
}


checkFeaturedSections();


{% endif %}


{% if blog.url == request.path %}

window.checkFeaturedSections = function() {
  var observer = new MutationObserver(function(mutations) {
    mutations.forEach(function(mutation) {
      if (mutation.addedNodes) {
        mutation.addedNodes.forEach(function(newNode) {
          if (newNode.nodeType === Node.ELEMENT_NODE && $(newNode).hasClass('css-0')) {
            observer.disconnect();
            // Now you can run the code that requires .css-0 to be present
            runFeatureSectionCode();
          }
        });
      }
    });
  });

  var config = { childList: true, subtree: true };
  $('.featured-section').each(function() {
    observer.observe(this, config);
  });
}

window.runFeatureSectionCode = function() {
  var featureBlogArrayLength = $('.section-insert').length;
  for (var i = 0; i < featureBlogArrayLength; i++) {
    var sectionInsert = $('.section-insert')[i];
    if (sectionInsert.getAttribute('id')) {
      var id = sectionInsert.getAttribute('id');
      if (id != '') {
        renderFeaturedBlogSection(id);
      }
    }
  }
}

// Start the observation
checkFeaturedSections();

{% endif %} 
      
var elements = document.getElementsByTagName("u");

// Loop through the elements
for (var i = 0; i < elements.length; i++) {
    elements[i].style.textDecoration = "none";
    var color = getComputedStyle(elements[i]).color;
    color = color.replace("rgb(","").replace(")","").split(",");
    var rgba = "rgba("+color[0]+","+color[1]+","+color[2]+",0.33)";
    elements[i].style.borderBottom = "1px solid "+rgba;
}


const adjustHeight = (textarea) => {
  textarea.style.height = 'auto';
  textarea.style.height = `${textarea.scrollHeight}px`;
};

const debouncedAdjustHeight = debounce(adjustHeight, 100);

document.addEventListener('input', (event) => {
  if (event.target.tagName.toLowerCase() === 'textarea') {
    debouncedAdjustHeight(event.target);
  }
});

document.addEventListener('keydown', (event) => {
  if (event.target.tagName.toLowerCase() === 'textarea' && event.key === 'Enter') {
    debouncedAdjustHeight(event.target);
  }
});


$('.list_item').each(function() {
  // Search for text in any descendant of .list-item
  if ($(this).find(':contains("Liquid error")').length > 0) {
    // Hide corresponding .list-item
    $(this).hide();
  }
});